{
	"info": {
		"_postman_id": "dce3ffdb-17f0-40d9-8df1-4e4ee3669bc7",
		"name": "Reqres_ApI_Remitta",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28558205",
		"_collection_link": "https://solar-astronaut-511904.postman.co/workspace/Cynth_QA~29ecb9a6-85ad-4f48-8e2a-4ce1c816de4e/collection/28558205-dce3ffdb-17f0-40d9-8df1-4e4ee3669bc7?action=share&source=collection_link&creator=28558205"
	},
	"item": [
		{
			"name": "LIST USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is good\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"}) \r",
							"\r",
							"pm.test (\"total is less than 13\", function () {\r",
							"    let jsonData = pm.response.json() \r",
							"    pm.expect(jsonData.total).to.be.lessThan(13);\r",
							"}) \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"}) \r",
							"\r",
							"pm.test (\"Data contains the email property\", function () {\r",
							"    let jsonData = pm.response.json() \r",
							"    pm.expect(jsonData.data).to.have.property(\"email\") \r",
							"}) \r",
							"\r",
							"pm.test (\"Data contains the email property\", function () {\r",
							"    let jsonData = pm.response.json() \r",
							"    pm.expect(jsonData.data).to.have.property(\"first_name\") \r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "LIST <RESOURCE>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"First color name is 'cerulean'\", function () {\r",
							"    pm.expect(pm.response.json().data[0].name).to.equal(\"cerulean\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data array contains 'tigerlily'\", function () {\r",
							"    pm.expect(pm.response.json().data.map(color => color.name)).to.include('tigerlily');\r",
							"});\r",
							"\r",
							"pm.test(\"Pantone value format is valid\", function () {\r",
							"    pm.response.json().data.forEach(function (color) {\r",
							"        pm.expect(color.pantone_value).to.match(/^\\d{2}-\\d{4}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check total pages\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.total_pages).to.equal(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check array length\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.data).to.have.lengthOf(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Support URL exists\", function () {\r",
							"    pm.expect(pm.response.json().support.url).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/unknown",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE <RESOURCE>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"}) \r",
							"\r",
							"pm.test(\"Data object exists in the response\", function () {\r",
							"    pm.expect(pm.response.json().data).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Name is 'fuchsia rose' and Color is '#C74375'\", function () {\r",
							"    const data = pm.response.json().data;\r",
							"    pm.expect(data.name).to.equal(\"fuchsia rose\");\r",
							"    pm.expect(data.color).to.equal(\"#C74375\");\r",
							"});\r",
							"\r",
							"pm.test(\"Name is 'fuchsia rose' and Color is '#C74375'\", function () {\r",
							"    const data = pm.response.json().data;\r",
							"    pm.expect(data.name).to.equal(\"fuchsia rose\");\r",
							"    pm.expect(data.color).to.equal(\"#C74375\");\r",
							"});\r",
							"\r",
							"pm.test(\"Pantone value format is valid\", function () {\r",
							"    pm.expect(pm.response.json().data.pantone_value).to.match(/^\\d{2}-\\d{4}$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Support URL exists\", function () {\r",
							"    pm.expect(pm.response.json().support.url).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/unknown/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is good\", function () {\r",
							"    pm.response.to.have.status (201);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"}) \r",
							"\r",
							"pm.test(\"Name is 'Cynthia' and Job is 'Teamlead_QA'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.name).to.equal(\"Cynthia\");\r",
							"    pm.expect(responseData.job).to.equal(\"Teamlead_QA\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID exists and is of type string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"'createdAt' field has a valid date-time format\", function () {\r",
							"    const createdAt = pm.response.json().createdAt;\r",
							"    pm.expect(createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Cynthia\",\r\n    \"job\": \"Teamlead_QA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is good\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"}) \r",
							"\r",
							"pm.test (\"An update is done in 2024 \", function () {\r",
							"    let jsonData = pm.response.json() \r",
							"    pm.expect(jsonData.updatedAt).to.include(2024);\r",
							"}) \r",
							"\r",
							"pm.test(\"'updatedAt' field exists in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.updatedAt).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"'updatedAt' field has a valid date-time format\", function () {\r",
							"    const updatedAt = pm.response.json().updatedAt;\r",
							"    pm.expect(updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Stella\",\r\n    \"job\": \"Product_Marketer\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is good\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"}) \r",
							"\r",
							"pm.test(\"'updatedAt' field exists in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.updatedAt).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"'updatedAt' field has a valid date-time format\", function () {\r",
							"    const updatedAt = pm.response.json().updatedAt;\r",
							"    pm.expect(updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							"pm.test(\"'updatedAt' value is not null\", function () {\r",
							"    const updatedAt = pm.response.json().updatedAt;\r",
							"    pm.expect(updatedAt).to.not.equal(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "REGISTER SUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is good\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							"pm.test(\"'id' field exists in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"'id' value is a positive integer\", function () {\r",
							"    const id = pm.response.json().id;\r",
							"    pm.expect(id).to.be.above(0).and.to.be.an('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test (\"id 4 is created\", function () {\r",
							"    let jsonData = pm.response.json() \r",
							"    pm.expect(jsonData.id).to.eql(4);\r",
							"}) \r",
							"\r",
							"pm.test(\"'token' field exists in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"'token' field is of type string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test (\"A token is created\", function () {\r",
							"    let jsonData = pm.response.json() \r",
							"    pm.expect(jsonData.token).to.eql(\"QpwL5tke4Pnpja7X4\");\r",
							"}) \r",
							"\r",
							"pm.test(\"'token' field has a reasonable length\", function () {\r",
							"    const token = pm.response.json().token;\r",
							"    pm.expect(token.length).to.be.within(10, 20);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "REGISTER  UNSUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is Bad Request\", function () {\r",
							"    pm.response.to.have.status (400);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"'error' field exists in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"'error' field is of type string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.error).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test (\"error should display Missing Password\", function () {\r",
							"    let jsonData = pm.response.json() \r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"}) \r",
							"\r",
							"pm.test (\"responseTime is less than 2000ms\", function () {\r",
							"        pm.expect(pm.response.responseTime).to.lessThan(5000);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "LOGIN SUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is good\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							"pm.test(\"'token' field exists in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"'token' field is of type string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"'token' field has a reasonable length\", function () {\r",
							"    const token = pm.response.json().token;\r",
							"    pm.expect(token.length).to.be.within(10, 20);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "LOGIN UNSUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is Bad Request\", function () {\r",
							"    pm.response.to.have.status (400);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"'error' field exists in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"'error' field is of type string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.error).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test (\"error should display Missing Password\", function () {\r",
							"    let jsonData = pm.response.json() \r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"}) \r",
							"\r",
							"pm.test (\"responseTime is less than 2000ms\", function () {\r",
							"        pm.expect(pm.response.responseTime).to.lessThan(5000);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELAYED RESPONSE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"status is good\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"    })\r",
							"\r",
							"pm.test (\"response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"}) \r",
							"\r",
							"pm.test(\"Check for specific error message on timeout\", function () {\r",
							"    if (pm.response.responseTime > 2000) {\r",
							"        pm.expect(pm.response.code).to.equal(408);\r",
							"        pm.expect(pm.response.json().error).to.equal(\"Request timed out\");\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in",
			"type": "string"
		},
		{
			"key": "myName",
			"value": "Cynthia",
			"type": "string"
		},
		{
			"key": "myGmail",
			"value": "Agwaraonyecynthia@gmail.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Mutairu",
			"type": "string"
		},
		{
			"key": "jobTitle",
			"value": "Teamlead_QA",
			"type": "string"
		}
	]
}